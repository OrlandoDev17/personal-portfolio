<div class={`animate-container ${Astro.props.class}`}>
  <slot />
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('.animate-container');

    containers.forEach((container) => {
      // Seleccionamos solo los hijos directos con clases que inicien con "a-"
      const animatedElements = Array.from(container.children).filter((el) =>
        Array.from(el.classList).some((cls) => cls.startsWith('a-'))
      );

      if (animatedElements.length === 0) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const el = entry.target;

            if (entry.isIntersecting) {
              // Si ya fue animado, no hacer nada
              if ((el as HTMLElement).dataset.animated === 'true') return;

              // Marcamos como animado
              (el as HTMLElement).dataset.animated = 'true';

              // Elimina la clase opacity-0 si existe
              if (el.classList.contains('opacity-0')) {
                el.classList.remove('opacity-0');
              }

              const animationClasses = Array.from(el.classList).filter((cls) =>
                cls.startsWith('a-')
              );

              // Forzar reflujo para reiniciar la animación
              el.classList.remove(...animationClasses);
              void (el as HTMLElement).offsetWidth; // Reflujo forzado
              el.classList.add(...animationClasses);
            }
          });
        },
        {
          root: null,
          rootMargin: '0px',
          threshold: 1, // Activa cuando el elemento está completamente visible
        }
      );

      animatedElements.forEach((el) => observer.observe(el));
    });
  });
</script>
